#!/usr/bin/env node

const five = require('johnny-five');
const chipio = require('chip-io');
const WebSocket = require('ws');
const debug = require('debug')('pcw-io');

const WS_URL = process.env.PCW_WS_URL || 'ws://localhost:3000';
const WS_RECONNECT_INTERVAL = process.env.PCW_RECONNECT_INTERVAL || 1000;
const WS_RECONNECT_MAX_TRIES = process.env.PCW_RECONNECT_MAX_TRIES || 5;
const PCW_DEBUG = process.env.PCW_DEBUG_ENABLED == 1;
const PCW_REPL = process.env.PCW_J5_REPL == 1;

const BTN_PINS = ['XIO-P1','XIO-P3','XIO-P5'];
const BTN_PIN_PLAY_PAUSE = BTN_PINS[0];
const BTN_PIN_SKIP_LIKE = BTN_PINS[1];
const BTN_PIN_STATION = BTN_PINS[2];
var currentReconnectTries = 0;
var ws;

if(PCW_DEBUG === true) {
    console.log('Starting in debug mode, simulating WebSocket connectivity.');
    ws = { send: function(message){ console.log('Sending: ' + message); } };
} else { wsConnect(); }


var board = new five.Board({
    io: new chipio(),
    repl: PCW_REPL
});

board.on('ready', function() {
    debug('Board Ready');
    var btnPlayPause = makePlayPauseButton();
    var btnSkipLike = makeSkipLikeButton();
    var btnStation = makeStationButton();

    this.on('exit', function() {
        console.log('bye bye.');
    });
});

/**
 * Create a new WebSocket connection with retries on close.
 */
function wsConnect() {
    ws = new WebSocket(WS_URL);

    ws.on('open', function open(){
        debug('WebSocket opened to ' + WS_URL);
        // Reset reconnect try counter
        currentReconnectTries = 0;
        ws.send(JSON.stringify({ client_type: 'pcw-io' }))
    });

    ws.on('message', function(data, flags) {
        debug('Message received: ', data);
        debug('Flags: ', flags);
    });

    ws.on('error', function(err) {
        console.error('WebSocket Error: ', err);
    });

    ws.on('close', function(){
        if(currentReconnectTries++ < WS_RECONNECT_MAX_TRIES) {
            console.log('Reconnecting WebSocket, try %s...', WS_RECONNECT_MAX_TRIES);
            setTimeout(wsConnect, WS_RECONNECT_INTERVAL * currentReconnectTries);
        } else {
            console.error('Cannot connect to PCW WebSocket Server after max tries (%s), exiting...', WS_RECONNECT_MAX_TRIES);
            process.exit(1);
        }
    });
}

/**
 * Makes a button with custom properties and methods, binding the provided callbacks.
 *
 * @param pin       {String}    CHIP pin to bind to.
 * @param upCB      {function}  Callback method when a button is released.
 * @param downCB    {function}  Callback method when a button is initially pressed down.
 * @param holdCB    {function}  Callback method when a button is being held.
 * @returns         {Button}
 */
function makeButton(pin, upCB, downCB, holdCB) {
    let btn = new five.Button(pin);
    btn.custom.held = false;

    btn.wasHeld = function() {
        return this.custom.held;
    };

    btn.resetHold = function() {
        this.custom.held = false;
        return this;
    };

    btn.on('up', function btnUp() {
        debug('[pin %s] btn up', pin);
        upCB(this, this.wasHeld());
        this.resetHold();
    });

    btn.on('down', function btnDown() {
        debug('[pin %s] btn down', pin);
        if(downCB) { downCB(this); }
    });

    btn.on('hold', function btnHold(){
        if(!this.custom.held) {
            this.custom.held = true;
            debug('[pin %s] btn hold', pin);
        }
        if(holdCB) { holdCB(this); }
    });

    return btn;
}

function makePlayPauseButton() {
    let btn = makeButton(BTN_PIN_PLAY_PAUSE, function(btn, wasHeld){
        if(wasHeld) {
            debug('Start/Stop Toggle...');
            ws.send(JSON.stringify({ event: 'start-stop' }));
        } else {
            ws.send(JSON.stringify({ event: 'pause-toggle', }));
        }
    });

    btn.custom.name = 'PLAY_PAUSE';
    return btn;
}

function makeSkipLikeButton() {
    let btn = makeButton(BTN_PIN_SKIP_LIKE, function(btn, wasHeld) {
        if(wasHeld) {
            debug('Liking...');
            ws.send(JSON.stringify({ event: 'like' }));
        } else {
            debug('Skipping...');
            ws.send(JSON.stringify({ event: 'skip', }));
        }
    });

    btn.custom.name = 'SKIP_LIKE';
    return btn;
}

function makeStationButton() {
    let btn = makeButton(BTN_PIN_STATION, function (btn, wasHeld) {
        if (wasHeld) {
            debug('Banning...');
            ws.send(JSON.stringify({event: 'ban'}));
        } else {
            debug('Next Station...');
            ws.send(JSON.stringify({event: 'station-next'}));
        }
    });

    btn.custom.name = 'STATION';
    return btn;
}